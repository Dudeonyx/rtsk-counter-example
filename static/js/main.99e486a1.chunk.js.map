{"version":3,"sources":["components/Counter.tsx","reducers/index.ts","index.tsx"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","incrementAsync","bind","assertThisInitialized","incrementIfOdd","value","onIncrement","setTimeout","_this$props","onDecrement","react_default","a","createElement","onClick","Component","createReducer","initialState","cases","INCREMENT","state","DECREMENT","store","createStore","counter","rootEl","document","getElementById","render","ReactDOM","components_Counter","getState","dispatch","type","subscribe"],"mappings":"4NAqCeA,cA7Bb,SAAAA,EAAYC,GAAqB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC/BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACtBA,EAAKU,eAAiBV,EAAKU,eAAeF,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHSA,gFAO3BG,KAAKJ,MAAMY,MAAQ,IAAM,GAC3BR,KAAKJ,MAAMa,uDAKbC,WAAWV,KAAKJ,MAAMa,YAAa,sCAGrB,IAAAE,EAC8BX,KAAKJ,MAAzCY,EADMG,EACNH,MAAOC,EADDE,EACCF,YAAaG,EADdD,EACcC,YAC5B,OACEC,EAAAC,EAAAC,cAAA,qBACYP,EADZ,UACyBK,EAAAC,EAAAC,cAAA,UAAQC,QAASP,GAAjB,KAAyC,IAChEI,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,KAAyC,IACzCC,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKO,gBAAtB,oBAAgE,IAChEM,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKI,gBAAtB,2BAxBca,qBCNPC,cAAc,CAC3BC,aAAc,EACdC,MAAO,CACLC,UAAW,SAAAC,GAAK,OAAIA,EAAQ,GAC5BC,UAAW,SAAAD,GAAK,OAAIA,EAAQ,MCC1BE,EAAQC,sBAAYC,GACpBC,EAASC,SAASC,eAAe,QAEjCC,EAAS,kBACbC,IAASD,OACPjB,EAAAC,EAAAC,cAACiB,EAAD,CACExB,MAAOgB,EAAMS,WACbxB,YAAa,kBAAMe,EAAMU,SAAS,CAAEC,KAAM,eAC1CvB,YAAa,kBAAMY,EAAMU,SAAS,CAAEC,KAAM,iBAE5CR,IAGJG,IACAN,EAAMY,UAAUN","file":"static/js/main.99e486a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\ninterface ICounterProps {\n  value: number;\n  onDecrement: () => void;\n  onIncrement: () => void;\n}\nclass Counter extends Component<ICounterProps> {\n  constructor(props:ICounterProps) {\n    super(props);\n    this.incrementAsync = this.incrementAsync.bind(this);\n    this.incrementIfOdd = this.incrementIfOdd.bind(this);\n  }\n\n  public incrementIfOdd() {\n    if (this.props.value % 2 !== 0) {\n      this.props.onIncrement();\n    }\n  }\n\n  public incrementAsync() {\n    setTimeout(this.props.onIncrement, 1000);\n  }\n\n  public render() {\n    const { value, onIncrement, onDecrement } = this.props;\n    return (\n      <p>\n        Clicked: {value} times <button onClick={onIncrement}>+</button>{' '}\n        <button onClick={onDecrement}>-</button>{' '}\n        <button onClick={this.incrementIfOdd}>Increment if odd</button>{' '}\n        <button onClick={this.incrementAsync}>Increment async</button>\n      </p>\n    );\n  }\n}\n\nexport default Counter;\n","import { createReducer } from '@redux-ts-starter-kit/core';\nexport default createReducer({\n  initialState: 0,\n  cases: {\n    INCREMENT: state => state + 1,\n    DECREMENT: state => state - 1,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport Counter from './components/Counter';\nimport counter from './reducers';\n\nconst store = createStore(counter);\nconst rootEl = document.getElementById('root');\n\nconst render = () =>\n  ReactDOM.render(\n    <Counter\n      value={store.getState()}\n      onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n      onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n    />,\n    rootEl,\n  );\n\nrender();\nstore.subscribe(render);\n"],"sourceRoot":""}